Week 1 Aug 30:

#TODO:
	1. Review learning outcomes.
	2. Virtual IDE
	3. Read part 1, 2, 3, 4 on isocpp.org/tour


*** QuickSort (Divide and Conquer Algo) ***



*** Algorithms ***

1. Definition:
   + A set of procedures to complete a task
2. Working definition:
   + Steps should be clear and a set of computation instructions.
3. Greatest Common Divisor (GCD) by replacing the larger of 2 numbers with their positive difference.
   + Example: GCD(15, 25) = 5
   => 15: 1, 3, 5, 15
   => 25: 1, 5, 25
      - Greatest Common: 5
   + Example 2: GCD(286, 1001)
   => 286: 1, 2, 11, 13 ...
   => 1001: 1, 2, ....
   * Procedures: 
   Step 1: if a = b, then gcd is a.
   Step 2: Replace the larger of a, b with their positive difference.
   Step 3: Goto Step 1

   * Note:
   - The sequence X_1, X_2, X_3 is decreasing. Why? Step 2 reduces the larger number every time.

   ==> Conclusion: All algorithms are terminated under a certain condition.

   - Compare common divisors of (a, b) to common divisors of (a-b, b)
   - Suppose `d` divides a and b
     + a = d*b
     + b = d * a
   - Suppose the difference be `s`
     + s = a - b = d*a_1 - d*b_1 = d*(a_1 - b_1)
     + So, d is also a divisor s = a - b
   - So, we have shown
     + If `d` divides both a and b
     + Then, it also divides s = a - b.
     + Conversely, if `d` divides s = a - b, b then `d` divides a and b.
     + s = d*a_2, b = d*b_2,
     ...
     + So, the common divisors of a, b are exactly the same as the divisors of (a-b) and b.

Steps:
	1. Has input (pre-condition) and output (post-condition or results)
	2. is finite (which is terminated)
	3. Has steps which are precisely stated and be computed by the performer
	4. Output should be intended correctly.


*** Reading Homework 1 ***

1. 



---------------------------------------
***** Math 273 - Day 1 *****
C++ Pointers

Pointer:
	+ An addresser in memory, or a variable which stores an address.
	Example: "Hello World"
	char *ptr = "Hello";
	+ If T is a type, then *T is a pointer to the T
	==> Variables of type T* store addresses of variables of type T.

* Basic idea:
	int num_1 = 10;
	int *ptr;
	ptr = &num_1;

	cout << "Get the value of ptr: " << *ptr <<endl; // 10
	*ptr = 30;
	cout << "num_1 is : " << num_1 << endl; //30

* C++ makes this prettier with reference variables
Given a type T, then &T is a reference to a variable of type T.
=> A reference is an alias (another name for a variable)

*** Problem: Program needs an extra storage while running the program
C++ operators new/delete

Operator `new` returns a pointer to request (extra storage)

int array[5] = {1, 2, 3, 4, 5};
int *nums;
nums = new int [10];

In C/C++ array has a fixed size ==> Solution is using Vector class.

* Pointer arithmetic:
   *(nums + 1) = nums[1]

* Memory Leak (fail to free storage):
   - Remember to release the storage back to the operating system
      int *ptr_array = new int [10];
      delete []ptr_array;
* Constructor vs Destructor:
   - Constructor --> Automatically run when object is called
   - Destructor --> Automatically run when object is destroyed. 
    Example: 
    // Constructor
    Duck()
    {
        cout << "Duck.h" << endl;
    }
    // Deconstructor
    ~Duck()
    {
        cout << "GoodBye Duck.h" << endl;
    }
    ==> Use `new` in Constructor and `delete` in destructor! 
2. Smart Pointers 
   - std::unique_ptr

*** Homework Recursion ***
1. Fib sequence: 1, 2, 3, 5, 8, 13, 21 ...
   f_1 = 1, f_2 = 2, 
   f_3 = f_1 + f_2
   f_n = f_(n-1) + f_(n-2)